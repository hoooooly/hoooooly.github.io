{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[],"Cache":[{"_id":"source/_posts/Hexo创建博客.md","hash":"3a88364bc975d7c12a96d1bd084bda0d7e07a327","modified":1620464342000},{"_id":"source/_posts/git常用命令.md","hash":"a4b22ba37e9b71883ecd70005bc43d7a2a618b84","modified":1620484606000},{"_id":"public/2021/05/08/git常用命令/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620487608989},{"_id":"public/2021/05/08/Hexo创建博客/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620487608989},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620487608989},{"_id":"public/archives/2021/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620487608989},{"_id":"public/archives/2021/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620487608989},{"_id":"public/categories/博客教程/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620487608989},{"_id":"public/categories/Git/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620487608989},{"_id":"public/tags/Hexo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620487608989},{"_id":"public/tags/Git/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620487608989},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1620487608989}],"Category":[{"name":"博客教程","_id":"ckofwhdw40001okxu9nrqefpg"},{"name":"Git","_id":"ckofwhdwc0006okxu4kn7337t"}],"Data":[],"Page":[],"Post":[{"title":"Hexo搭建个人博客","date":"2021-05-08T07:39:22.000Z","pic":null,"comments":1,"toc":true,"only":["home","category","tag"],"_content":"\n\n# Hexo\n\n[Hexo](https://hexo.io/zh-cn/)是一个快速、简洁且高效的博客框架。\n\n## 安装\n\n### git安装\n\n```shell\n    Windows：下载并安装 git.\n    Mac：使用 Homebrew, MacPorts 或者下载 安装程序。\n    Linux (Ubuntu, Debian)：sudo apt-get install git-core\n    Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core\n```\n\n### 安装 Node.js\n\nNode.js 为大多数平台提供了官方的 安装程序。对于中国大陆地区用户，可以前往 淘宝 Node.js 镜像 下载。\n\n其它的安装方法：\n\n```shell\n    Windows：通过 nvs（推荐）或者nvm 安装。\n    Mac：使用 Homebrew 或 MacPorts 安装。\n    Linux（DEB/RPM-based）：从 NodeSource 安装。\n    其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 指导\n```\n\n### 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```shell\n    npm install -g hexo-cli\n```\n\n安装完成后，`win`+`R`输入`cmd`调出命令行，输入`hexo`提示如下，说明安装正确。\n\n```shell\n    C:\\Users\\espho>hexo\n    Usage: hexo <command>\n\n    Commands:\n    help     Get help on a command.\n    init     Create a new Hexo folder.\n    version  Display version information.\n\n    Global Options:\n    --config  Specify config file instead of using _config.yml\n    --cwd     Specify the CWD\n    --debug   Display all verbose messages in the terminal\n    --draft   Display draft posts\n    --safe    Disable all plugins and scripts\n    --silent  Hide output on console\n\n    For more help, you can use 'hexo help [command]' for the detailed information\n    or you can check the docs: http://hexo.io/docs/\n```\n\n## 建站\n\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。\n\n```shell\n    hexo init <folder>\n    cd <folder>\n    npm install\n```\n\n新建完成后，指定文件夹的目录如下：\n\n```shell\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n### _config.yml\n\n网站的 配置 信息，您可以在此配置大部分的参数。\n\n### package.json\n\n应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。\n\n```shell\npackage.json\n{\n  \"name\": \"hexo-site\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"hexo\": {\n    \"version\": \"\"\n  },\n  \"dependencies\": {\n    \"hexo\": \"^3.8.0\",\n    \"hexo-generator-archive\": \"^0.1.5\",\n    \"hexo-generator-category\": \"^0.1.3\",\n    \"hexo-generator-index\": \"^0.2.1\",\n    \"hexo-generator-tag\": \"^0.2.0\",\n    \"hexo-renderer-ejs\": \"^0.3.1\",\n    \"hexo-renderer-stylus\": \"^0.3.3\",\n    \"hexo-renderer-marked\": \"^0.3.2\",\n    \"hexo-server\": \"^0.3.3\"\n  }\n}\n```\n\n### scaffolds\n\n`模版`文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n\nHexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。\n\n### source\n\n资源文件夹是存放用户资源的地方。除 `_posts`文件夹之外，开头命名为 `_ (下划线)`的文件`/文件夹`和`隐藏的文件`将会被忽略。Markdown 和 HTML 文件会被解析并放到 `public`文件夹，而其他文件会被拷贝过去。\n\n### themes\n\n`主题`文件夹。Hexo 会根据主题来生成静态页面。\n\n## 配置\n\n相关配置可直接访问[官方文档](https://hexo.io/zh-cn/docs/configuration)查看，我们先从使用别人的主题开始，[官方](https://hexo.io/themes/)提供了335个主题下载使用，你也可以根据规范制定自己的主题。\n\n## 主题\n\n创建`Hexo`主题非常容易，您只要在`themes`文件夹内，新增一个任意名称的文件夹，并修改`_config.yml`内的`theme`设定，即可切换主题。一个主题可能会有以下的结构：\n\n```shell\n.\n├── _config.yml\n├── languages\n├── layout\n├── scripts\n└── source\n```\n\n### _config.yml\n\n主题的配置文件。和 Hexo 配置文件不同，主题配置文件修改时会自动更新，无需重启`Hexo Server`。\n\n## 获取主题\n\n选择相应的主题，从`github`上获取到`themes`目录下。\n\n修改主目录下`_config.yml`中的配置文件，将`theme`修改为获取主题的`文件夹名`。\n\n```shell\ntheme: Kratos-Rebirth\n```\n\n## 运行\n\n在主目录下调用`cmd`命令`hexo server`运行服务，访问`http://localhost:4000`进入博客。\n\n```shell\nespho@Holy-Surface MINGW64 /e/blog\n$ hexo server\nINFO  Validating config\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\nINFO  感谢使用 Kratos-Rebirth 主题，您的版本是 v1.6.2\nINFO  如有任何疑问，您可以查阅文档，或是去 https://github.com/Candinya/Kratos-Rebirth/issues 提出对应的 issue 。\nINFO  预祝您使用愉快。\n```\n\n## 添加文章\n\n","source":"_posts/Hexo创建博客.md","raw":"---\ntitle: Hexo搭建个人博客\ndate: 2021-05-08 15:39:22\ncategories: 博客教程\ntags:\n- Hexo\n# sticky: 100\npic:\ncomments: true\ntoc: true\nonly:\n- home\n- category\n- tag\n---\n\n\n# Hexo\n\n[Hexo](https://hexo.io/zh-cn/)是一个快速、简洁且高效的博客框架。\n\n## 安装\n\n### git安装\n\n```shell\n    Windows：下载并安装 git.\n    Mac：使用 Homebrew, MacPorts 或者下载 安装程序。\n    Linux (Ubuntu, Debian)：sudo apt-get install git-core\n    Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core\n```\n\n### 安装 Node.js\n\nNode.js 为大多数平台提供了官方的 安装程序。对于中国大陆地区用户，可以前往 淘宝 Node.js 镜像 下载。\n\n其它的安装方法：\n\n```shell\n    Windows：通过 nvs（推荐）或者nvm 安装。\n    Mac：使用 Homebrew 或 MacPorts 安装。\n    Linux（DEB/RPM-based）：从 NodeSource 安装。\n    其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 指导\n```\n\n### 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```shell\n    npm install -g hexo-cli\n```\n\n安装完成后，`win`+`R`输入`cmd`调出命令行，输入`hexo`提示如下，说明安装正确。\n\n```shell\n    C:\\Users\\espho>hexo\n    Usage: hexo <command>\n\n    Commands:\n    help     Get help on a command.\n    init     Create a new Hexo folder.\n    version  Display version information.\n\n    Global Options:\n    --config  Specify config file instead of using _config.yml\n    --cwd     Specify the CWD\n    --debug   Display all verbose messages in the terminal\n    --draft   Display draft posts\n    --safe    Disable all plugins and scripts\n    --silent  Hide output on console\n\n    For more help, you can use 'hexo help [command]' for the detailed information\n    or you can check the docs: http://hexo.io/docs/\n```\n\n## 建站\n\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。\n\n```shell\n    hexo init <folder>\n    cd <folder>\n    npm install\n```\n\n新建完成后，指定文件夹的目录如下：\n\n```shell\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n### _config.yml\n\n网站的 配置 信息，您可以在此配置大部分的参数。\n\n### package.json\n\n应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。\n\n```shell\npackage.json\n{\n  \"name\": \"hexo-site\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"hexo\": {\n    \"version\": \"\"\n  },\n  \"dependencies\": {\n    \"hexo\": \"^3.8.0\",\n    \"hexo-generator-archive\": \"^0.1.5\",\n    \"hexo-generator-category\": \"^0.1.3\",\n    \"hexo-generator-index\": \"^0.2.1\",\n    \"hexo-generator-tag\": \"^0.2.0\",\n    \"hexo-renderer-ejs\": \"^0.3.1\",\n    \"hexo-renderer-stylus\": \"^0.3.3\",\n    \"hexo-renderer-marked\": \"^0.3.2\",\n    \"hexo-server\": \"^0.3.3\"\n  }\n}\n```\n\n### scaffolds\n\n`模版`文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\n\nHexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。\n\n### source\n\n资源文件夹是存放用户资源的地方。除 `_posts`文件夹之外，开头命名为 `_ (下划线)`的文件`/文件夹`和`隐藏的文件`将会被忽略。Markdown 和 HTML 文件会被解析并放到 `public`文件夹，而其他文件会被拷贝过去。\n\n### themes\n\n`主题`文件夹。Hexo 会根据主题来生成静态页面。\n\n## 配置\n\n相关配置可直接访问[官方文档](https://hexo.io/zh-cn/docs/configuration)查看，我们先从使用别人的主题开始，[官方](https://hexo.io/themes/)提供了335个主题下载使用，你也可以根据规范制定自己的主题。\n\n## 主题\n\n创建`Hexo`主题非常容易，您只要在`themes`文件夹内，新增一个任意名称的文件夹，并修改`_config.yml`内的`theme`设定，即可切换主题。一个主题可能会有以下的结构：\n\n```shell\n.\n├── _config.yml\n├── languages\n├── layout\n├── scripts\n└── source\n```\n\n### _config.yml\n\n主题的配置文件。和 Hexo 配置文件不同，主题配置文件修改时会自动更新，无需重启`Hexo Server`。\n\n## 获取主题\n\n选择相应的主题，从`github`上获取到`themes`目录下。\n\n修改主目录下`_config.yml`中的配置文件，将`theme`修改为获取主题的`文件夹名`。\n\n```shell\ntheme: Kratos-Rebirth\n```\n\n## 运行\n\n在主目录下调用`cmd`命令`hexo server`运行服务，访问`http://localhost:4000`进入博客。\n\n```shell\nespho@Holy-Surface MINGW64 /e/blog\n$ hexo server\nINFO  Validating config\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\nINFO  感谢使用 Kratos-Rebirth 主题，您的版本是 v1.6.2\nINFO  如有任何疑问，您可以查阅文档，或是去 https://github.com/Candinya/Kratos-Rebirth/issues 提出对应的 issue 。\nINFO  预祝您使用愉快。\n```\n\n## 添加文章\n\n","slug":"Hexo创建博客","published":1,"updated":"2021-05-08T08:59:02.000Z","layout":"post","photos":[],"link":"","_id":"ckofwhdvw0000okxu1dn269es","content":"<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><p><a href=\"https://hexo.io/zh-cn/\">Hexo</a>是一个快速、简洁且高效的博客框架。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"git安装\"><a href=\"#git安装\" class=\"headerlink\" title=\"git安装\"></a>git安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows：下载并安装 git.</span><br><span class=\"line\">Mac：使用 Homebrew, MacPorts 或者下载 安装程序。</span><br><span class=\"line\">Linux (Ubuntu, Debian)：sudo apt-get install git-core</span><br><span class=\"line\">Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><p>Node.js 为大多数平台提供了官方的 安装程序。对于中国大陆地区用户，可以前往 淘宝 Node.js 镜像 下载。</p>\n<p>其它的安装方法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows：通过 nvs（推荐）或者nvm 安装。</span><br><span class=\"line\">Mac：使用 Homebrew 或 MacPorts 安装。</span><br><span class=\"line\">Linux（DEB/RPM-based）：从 NodeSource 安装。</span><br><span class=\"line\">其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 指导</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，<code>win</code>+<code>R</code>输入<code>cmd</code>调出命令行，输入<code>hexo</code>提示如下，说明安装正确。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\espho&gt;hexo</span><br><span class=\"line\">Usage: hexo &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">help     Get help on a command.</span><br><span class=\"line\">init     Create a new Hexo folder.</span><br><span class=\"line\">version  Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">--config  Specify config file instead of using _config.yml</span><br><span class=\"line\">--cwd     Specify the CWD</span><br><span class=\"line\">--debug   Display all verbose messages in the terminal</span><br><span class=\"line\">--draft   Display draft posts</span><br><span class=\"line\">--safe    Disable all plugins and scripts</span><br><span class=\"line\">--silent  Hide output on console</span><br><span class=\"line\"></span><br><span class=\"line\">For more help, you can use &#x27;hexo help [command]&#x27; for the detailed information</span><br><span class=\"line\">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>新建完成后，指定文件夹的目录如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h3><p>网站的 配置 信息，您可以在此配置大部分的参数。</p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class=\"line\">  &quot;private&quot;: true,</span><br><span class=\"line\">  &quot;hexo&quot;: &#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;hexo&quot;: &quot;^3.8.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,</span><br><span class=\"line\">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"scaffolds\"><a href=\"#scaffolds\" class=\"headerlink\" title=\"scaffolds\"></a>scaffolds</h3><p><code>模版</code>文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>\n<p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>\n<h3 id=\"source\"><a href=\"#source\" class=\"headerlink\" title=\"source\"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code>文件夹之外，开头命名为 <code>_ (下划线)</code>的文件<code>/文件夹</code>和<code>隐藏的文件</code>将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code>文件夹，而其他文件会被拷贝过去。</p>\n<h3 id=\"themes\"><a href=\"#themes\" class=\"headerlink\" title=\"themes\"></a>themes</h3><p><code>主题</code>文件夹。Hexo 会根据主题来生成静态页面。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>相关配置可直接访问<a href=\"https://hexo.io/zh-cn/docs/configuration\">官方文档</a>查看，我们先从使用别人的主题开始，<a href=\"https://hexo.io/themes/\">官方</a>提供了335个主题下载使用，你也可以根据规范制定自己的主题。</p>\n<h2 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h2><p>创建<code>Hexo</code>主题非常容易，您只要在<code>themes</code>文件夹内，新增一个任意名称的文件夹，并修改<code>_config.yml</code>内的<code>theme</code>设定，即可切换主题。一个主题可能会有以下的结构：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── languages</span><br><span class=\"line\">├── layout</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">└── source</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"config-yml-1\"><a href=\"#config-yml-1\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h3><p>主题的配置文件。和 Hexo 配置文件不同，主题配置文件修改时会自动更新，无需重启<code>Hexo Server</code>。</p>\n<h2 id=\"获取主题\"><a href=\"#获取主题\" class=\"headerlink\" title=\"获取主题\"></a>获取主题</h2><p>选择相应的主题，从<code>github</code>上获取到<code>themes</code>目录下。</p>\n<p>修改主目录下<code>_config.yml</code>中的配置文件，将<code>theme</code>修改为获取主题的<code>文件夹名</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: Kratos-Rebirth</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>在主目录下调用<code>cmd</code>命令<code>hexo server</code>运行服务，访问<code>http://localhost:4000</code>进入博客。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">espho@Holy-Surface MINGW64 /e/blog</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo server</span></span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br><span class=\"line\">INFO  感谢使用 Kratos-Rebirth 主题，您的版本是 v1.6.2</span><br><span class=\"line\">INFO  如有任何疑问，您可以查阅文档，或是去 https://github.com/Candinya/Kratos-Rebirth/issues 提出对应的 issue 。</span><br><span class=\"line\">INFO  预祝您使用愉快。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加文章\"><a href=\"#添加文章\" class=\"headerlink\" title=\"添加文章\"></a>添加文章</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><p><a href=\"https://hexo.io/zh-cn/\">Hexo</a>是一个快速、简洁且高效的博客框架。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"git安装\"><a href=\"#git安装\" class=\"headerlink\" title=\"git安装\"></a>git安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows：下载并安装 git.</span><br><span class=\"line\">Mac：使用 Homebrew, MacPorts 或者下载 安装程序。</span><br><span class=\"line\">Linux (Ubuntu, Debian)：sudo apt-get install git-core</span><br><span class=\"line\">Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><p>Node.js 为大多数平台提供了官方的 安装程序。对于中国大陆地区用户，可以前往 淘宝 Node.js 镜像 下载。</p>\n<p>其它的安装方法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows：通过 nvs（推荐）或者nvm 安装。</span><br><span class=\"line\">Mac：使用 Homebrew 或 MacPorts 安装。</span><br><span class=\"line\">Linux（DEB/RPM-based）：从 NodeSource 安装。</span><br><span class=\"line\">其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 指导</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，<code>win</code>+<code>R</code>输入<code>cmd</code>调出命令行，输入<code>hexo</code>提示如下，说明安装正确。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\espho&gt;hexo</span><br><span class=\"line\">Usage: hexo &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">help     Get help on a command.</span><br><span class=\"line\">init     Create a new Hexo folder.</span><br><span class=\"line\">version  Display version information.</span><br><span class=\"line\"></span><br><span class=\"line\">Global Options:</span><br><span class=\"line\">--config  Specify config file instead of using _config.yml</span><br><span class=\"line\">--cwd     Specify the CWD</span><br><span class=\"line\">--debug   Display all verbose messages in the terminal</span><br><span class=\"line\">--draft   Display draft posts</span><br><span class=\"line\">--safe    Disable all plugins and scripts</span><br><span class=\"line\">--silent  Hide output on console</span><br><span class=\"line\"></span><br><span class=\"line\">For more help, you can use &#x27;hexo help [command]&#x27; for the detailed information</span><br><span class=\"line\">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>新建完成后，指定文件夹的目录如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h3><p>网站的 配置 信息，您可以在此配置大部分的参数。</p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class=\"line\">  &quot;private&quot;: true,</span><br><span class=\"line\">  &quot;hexo&quot;: &#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;hexo&quot;: &quot;^3.8.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,</span><br><span class=\"line\">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"scaffolds\"><a href=\"#scaffolds\" class=\"headerlink\" title=\"scaffolds\"></a>scaffolds</h3><p><code>模版</code>文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>\n<p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>\n<h3 id=\"source\"><a href=\"#source\" class=\"headerlink\" title=\"source\"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code>文件夹之外，开头命名为 <code>_ (下划线)</code>的文件<code>/文件夹</code>和<code>隐藏的文件</code>将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code>文件夹，而其他文件会被拷贝过去。</p>\n<h3 id=\"themes\"><a href=\"#themes\" class=\"headerlink\" title=\"themes\"></a>themes</h3><p><code>主题</code>文件夹。Hexo 会根据主题来生成静态页面。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>相关配置可直接访问<a href=\"https://hexo.io/zh-cn/docs/configuration\">官方文档</a>查看，我们先从使用别人的主题开始，<a href=\"https://hexo.io/themes/\">官方</a>提供了335个主题下载使用，你也可以根据规范制定自己的主题。</p>\n<h2 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h2><p>创建<code>Hexo</code>主题非常容易，您只要在<code>themes</code>文件夹内，新增一个任意名称的文件夹，并修改<code>_config.yml</code>内的<code>theme</code>设定，即可切换主题。一个主题可能会有以下的结构：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── languages</span><br><span class=\"line\">├── layout</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">└── source</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"config-yml-1\"><a href=\"#config-yml-1\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h3><p>主题的配置文件。和 Hexo 配置文件不同，主题配置文件修改时会自动更新，无需重启<code>Hexo Server</code>。</p>\n<h2 id=\"获取主题\"><a href=\"#获取主题\" class=\"headerlink\" title=\"获取主题\"></a>获取主题</h2><p>选择相应的主题，从<code>github</code>上获取到<code>themes</code>目录下。</p>\n<p>修改主目录下<code>_config.yml</code>中的配置文件，将<code>theme</code>修改为获取主题的<code>文件夹名</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: Kratos-Rebirth</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>在主目录下调用<code>cmd</code>命令<code>hexo server</code>运行服务，访问<code>http://localhost:4000</code>进入博客。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">espho@Holy-Surface MINGW64 /e/blog</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo server</span></span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br><span class=\"line\">INFO  感谢使用 Kratos-Rebirth 主题，您的版本是 v1.6.2</span><br><span class=\"line\">INFO  如有任何疑问，您可以查阅文档，或是去 https://github.com/Candinya/Kratos-Rebirth/issues 提出对应的 issue 。</span><br><span class=\"line\">INFO  预祝您使用愉快。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加文章\"><a href=\"#添加文章\" class=\"headerlink\" title=\"添加文章\"></a>添加文章</h2>"},{"title":"git常用命令","date":"2021-05-08T10:03:19.000Z","pic":null,"comments":1,"toc":true,"only":["home","category","tag"],"_content":"\n# Git 常用命令\n\n## 仓库\n\n### 在当前目录新建一个Git代码库\n\n```shell\ngit init\n```\n\n### 新建一个目录，将其初始化为Git代码库\n\n```shell\ngit init [project-name]\n```\n\n### 下载一个项目和它的整个代码历史\n\n```shell\ngit clone [url]\n```\n\n## 配置\n\n### 显示当前的Git配置\n\n```shell\ngit config --list\n```\n\n### 编辑Git配置文件\n\n```shell\ngit config -e [--global]\n```\n\n### 设置提交代码时的用户信息\n\n```shell\ngit config [--global] user.name \"[name]\"\ngit config [--global] user.email \"[email address]\"\n```\n\n## 增加/删除文件\n\n### 添加指定文件到暂存区\n\n```shell\ngit add [file1] [file2] ...\n```\n\n### 添加指定目录到暂存区，包括子目录\n\n```shell\ngit add [dir]\n```\n\n#### 添加当前目录的所有文件到暂存区\n\n```shell\ngit add .\n```\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n代码提交\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n分支\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n标签\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n查看信息\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n远程同步\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n撤销\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n其他\n# 生成一个可供发布的压缩包\n$ git archive\n","source":"_posts/git常用命令.md","raw":"---\ntitle: git常用命令\ndate: 2021-05-08 18:03:19\ncategories: Git\ntags:\n- Git\n# sticky: 100\npic:\ncomments: true\ntoc: true\nonly:\n- home\n- category\n- tag\n---\n\n# Git 常用命令\n\n## 仓库\n\n### 在当前目录新建一个Git代码库\n\n```shell\ngit init\n```\n\n### 新建一个目录，将其初始化为Git代码库\n\n```shell\ngit init [project-name]\n```\n\n### 下载一个项目和它的整个代码历史\n\n```shell\ngit clone [url]\n```\n\n## 配置\n\n### 显示当前的Git配置\n\n```shell\ngit config --list\n```\n\n### 编辑Git配置文件\n\n```shell\ngit config -e [--global]\n```\n\n### 设置提交代码时的用户信息\n\n```shell\ngit config [--global] user.name \"[name]\"\ngit config [--global] user.email \"[email address]\"\n```\n\n## 增加/删除文件\n\n### 添加指定文件到暂存区\n\n```shell\ngit add [file1] [file2] ...\n```\n\n### 添加指定目录到暂存区，包括子目录\n\n```shell\ngit add [dir]\n```\n\n#### 添加当前目录的所有文件到暂存区\n\n```shell\ngit add .\n```\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n代码提交\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n分支\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n标签\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n查看信息\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n远程同步\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n撤销\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n其他\n# 生成一个可供发布的压缩包\n$ git archive\n","slug":"git常用命令","published":1,"updated":"2021-05-08T14:36:46.000Z","layout":"post","photos":[],"link":"","_id":"ckofwhdwb0005okxuc7hj7abr","content":"<h1 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h1><h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><h3 id=\"在当前目录新建一个Git代码库\"><a href=\"#在当前目录新建一个Git代码库\" class=\"headerlink\" title=\"在当前目录新建一个Git代码库\"></a>在当前目录新建一个Git代码库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建一个目录，将其初始化为Git代码库\"><a href=\"#新建一个目录，将其初始化为Git代码库\" class=\"headerlink\" title=\"新建一个目录，将其初始化为Git代码库\"></a>新建一个目录，将其初始化为Git代码库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init [project-name]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载一个项目和它的整个代码历史\"><a href=\"#下载一个项目和它的整个代码历史\" class=\"headerlink\" title=\"下载一个项目和它的整个代码历史\"></a>下载一个项目和它的整个代码历史</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone [url]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"显示当前的Git配置\"><a href=\"#显示当前的Git配置\" class=\"headerlink\" title=\"显示当前的Git配置\"></a>显示当前的Git配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编辑Git配置文件\"><a href=\"#编辑Git配置文件\" class=\"headerlink\" title=\"编辑Git配置文件\"></a>编辑Git配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config -e [--global]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置提交代码时的用户信息\"><a href=\"#设置提交代码时的用户信息\" class=\"headerlink\" title=\"设置提交代码时的用户信息\"></a>设置提交代码时的用户信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config [--global] user.name &quot;[name]&quot;</span><br><span class=\"line\">git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h2><h3 id=\"添加指定文件到暂存区\"><a href=\"#添加指定文件到暂存区\" class=\"headerlink\" title=\"添加指定文件到暂存区\"></a>添加指定文件到暂存区</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加指定目录到暂存区，包括子目录\"><a href=\"#添加指定目录到暂存区，包括子目录\" class=\"headerlink\" title=\"添加指定目录到暂存区，包括子目录\"></a>添加指定目录到暂存区，包括子目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add [dir]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加当前目录的所有文件到暂存区\"><a href=\"#添加当前目录的所有文件到暂存区\" class=\"headerlink\" title=\"添加当前目录的所有文件到暂存区\"></a>添加当前目录的所有文件到暂存区</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加每个变化前，都会要求确认\"><a href=\"#添加每个变化前，都会要求确认\" class=\"headerlink\" title=\"添加每个变化前，都会要求确认\"></a>添加每个变化前，都会要求确认</h1><h1 id=\"对于同一个文件的多处变化，可以实现分次提交\"><a href=\"#对于同一个文件的多处变化，可以实现分次提交\" class=\"headerlink\" title=\"对于同一个文件的多处变化，可以实现分次提交\"></a>对于同一个文件的多处变化，可以实现分次提交</h1><p>$ git add -p</p>\n<h1 id=\"删除工作区文件，并且将这次删除放入暂存区\"><a href=\"#删除工作区文件，并且将这次删除放入暂存区\" class=\"headerlink\" title=\"删除工作区文件，并且将这次删除放入暂存区\"></a>删除工作区文件，并且将这次删除放入暂存区</h1><p>$ git rm [file1] [file2] …</p>\n<h1 id=\"停止追踪指定文件，但该文件会保留在工作区\"><a href=\"#停止追踪指定文件，但该文件会保留在工作区\" class=\"headerlink\" title=\"停止追踪指定文件，但该文件会保留在工作区\"></a>停止追踪指定文件，但该文件会保留在工作区</h1><p>$ git rm –cached [file]</p>\n<h1 id=\"改名文件，并且将这个改名放入暂存区\"><a href=\"#改名文件，并且将这个改名放入暂存区\" class=\"headerlink\" title=\"改名文件，并且将这个改名放入暂存区\"></a>改名文件，并且将这个改名放入暂存区</h1><p>$ git mv [file-original] [file-renamed]<br>代码提交</p>\n<h1 id=\"提交暂存区到仓库区\"><a href=\"#提交暂存区到仓库区\" class=\"headerlink\" title=\"提交暂存区到仓库区\"></a>提交暂存区到仓库区</h1><p>$ git commit -m [message]</p>\n<h1 id=\"提交暂存区的指定文件到仓库区\"><a href=\"#提交暂存区的指定文件到仓库区\" class=\"headerlink\" title=\"提交暂存区的指定文件到仓库区\"></a>提交暂存区的指定文件到仓库区</h1><p>$ git commit [file1] [file2] … -m [message]</p>\n<h1 id=\"提交工作区自上次commit之后的变化，直接到仓库区\"><a href=\"#提交工作区自上次commit之后的变化，直接到仓库区\" class=\"headerlink\" title=\"提交工作区自上次commit之后的变化，直接到仓库区\"></a>提交工作区自上次commit之后的变化，直接到仓库区</h1><p>$ git commit -a</p>\n<h1 id=\"提交时显示所有diff信息\"><a href=\"#提交时显示所有diff信息\" class=\"headerlink\" title=\"提交时显示所有diff信息\"></a>提交时显示所有diff信息</h1><p>$ git commit -v</p>\n<h1 id=\"使用一次新的commit，替代上一次提交\"><a href=\"#使用一次新的commit，替代上一次提交\" class=\"headerlink\" title=\"使用一次新的commit，替代上一次提交\"></a>使用一次新的commit，替代上一次提交</h1><h1 id=\"如果代码没有任何新变化，则用来改写上一次commit的提交信息\"><a href=\"#如果代码没有任何新变化，则用来改写上一次commit的提交信息\" class=\"headerlink\" title=\"如果代码没有任何新变化，则用来改写上一次commit的提交信息\"></a>如果代码没有任何新变化，则用来改写上一次commit的提交信息</h1><p>$ git commit –amend -m [message]</p>\n<h1 id=\"重做上一次commit，并包括指定文件的新变化\"><a href=\"#重做上一次commit，并包括指定文件的新变化\" class=\"headerlink\" title=\"重做上一次commit，并包括指定文件的新变化\"></a>重做上一次commit，并包括指定文件的新变化</h1><p>$ git commit –amend [file1] [file2] …<br>分支</p>\n<h1 id=\"列出所有本地分支\"><a href=\"#列出所有本地分支\" class=\"headerlink\" title=\"列出所有本地分支\"></a>列出所有本地分支</h1><p>$ git branch</p>\n<h1 id=\"列出所有远程分支\"><a href=\"#列出所有远程分支\" class=\"headerlink\" title=\"列出所有远程分支\"></a>列出所有远程分支</h1><p>$ git branch -r</p>\n<h1 id=\"列出所有本地分支和远程分支\"><a href=\"#列出所有本地分支和远程分支\" class=\"headerlink\" title=\"列出所有本地分支和远程分支\"></a>列出所有本地分支和远程分支</h1><p>$ git branch -a</p>\n<h1 id=\"新建一个分支，但依然停留在当前分支\"><a href=\"#新建一个分支，但依然停留在当前分支\" class=\"headerlink\" title=\"新建一个分支，但依然停留在当前分支\"></a>新建一个分支，但依然停留在当前分支</h1><p>$ git branch [branch-name]</p>\n<h1 id=\"新建一个分支，并切换到该分支\"><a href=\"#新建一个分支，并切换到该分支\" class=\"headerlink\" title=\"新建一个分支，并切换到该分支\"></a>新建一个分支，并切换到该分支</h1><p>$ git checkout -b [branch]</p>\n<h1 id=\"新建一个分支，指向指定commit\"><a href=\"#新建一个分支，指向指定commit\" class=\"headerlink\" title=\"新建一个分支，指向指定commit\"></a>新建一个分支，指向指定commit</h1><p>$ git branch [branch] [commit]</p>\n<h1 id=\"新建一个分支，与指定的远程分支建立追踪关系\"><a href=\"#新建一个分支，与指定的远程分支建立追踪关系\" class=\"headerlink\" title=\"新建一个分支，与指定的远程分支建立追踪关系\"></a>新建一个分支，与指定的远程分支建立追踪关系</h1><p>$ git branch –track [branch] [remote-branch]</p>\n<h1 id=\"切换到指定分支，并更新工作区\"><a href=\"#切换到指定分支，并更新工作区\" class=\"headerlink\" title=\"切换到指定分支，并更新工作区\"></a>切换到指定分支，并更新工作区</h1><p>$ git checkout [branch-name]</p>\n<h1 id=\"切换到上一个分支\"><a href=\"#切换到上一个分支\" class=\"headerlink\" title=\"切换到上一个分支\"></a>切换到上一个分支</h1><p>$ git checkout -</p>\n<h1 id=\"建立追踪关系，在现有分支与指定的远程分支之间\"><a href=\"#建立追踪关系，在现有分支与指定的远程分支之间\" class=\"headerlink\" title=\"建立追踪关系，在现有分支与指定的远程分支之间\"></a>建立追踪关系，在现有分支与指定的远程分支之间</h1><p>$ git branch –set-upstream [branch] [remote-branch]</p>\n<h1 id=\"合并指定分支到当前分支\"><a href=\"#合并指定分支到当前分支\" class=\"headerlink\" title=\"合并指定分支到当前分支\"></a>合并指定分支到当前分支</h1><p>$ git merge [branch]</p>\n<h1 id=\"选择一个commit，合并进当前分支\"><a href=\"#选择一个commit，合并进当前分支\" class=\"headerlink\" title=\"选择一个commit，合并进当前分支\"></a>选择一个commit，合并进当前分支</h1><p>$ git cherry-pick [commit]</p>\n<h1 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h1><p>$ git branch -d [branch-name]</p>\n<h1 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h1><p>$ git push origin –delete [branch-name]<br>$ git branch -dr [remote/branch]<br>标签</p>\n<h1 id=\"列出所有tag\"><a href=\"#列出所有tag\" class=\"headerlink\" title=\"列出所有tag\"></a>列出所有tag</h1><p>$ git tag</p>\n<h1 id=\"新建一个tag在当前commit\"><a href=\"#新建一个tag在当前commit\" class=\"headerlink\" title=\"新建一个tag在当前commit\"></a>新建一个tag在当前commit</h1><p>$ git tag [tag]</p>\n<h1 id=\"新建一个tag在指定commit\"><a href=\"#新建一个tag在指定commit\" class=\"headerlink\" title=\"新建一个tag在指定commit\"></a>新建一个tag在指定commit</h1><p>$ git tag [tag] [commit]</p>\n<h1 id=\"删除本地tag\"><a href=\"#删除本地tag\" class=\"headerlink\" title=\"删除本地tag\"></a>删除本地tag</h1><p>$ git tag -d [tag]</p>\n<h1 id=\"删除远程tag\"><a href=\"#删除远程tag\" class=\"headerlink\" title=\"删除远程tag\"></a>删除远程tag</h1><p>$ git push origin :refs/tags/[tagName]</p>\n<h1 id=\"查看tag信息\"><a href=\"#查看tag信息\" class=\"headerlink\" title=\"查看tag信息\"></a>查看tag信息</h1><p>$ git show [tag]</p>\n<h1 id=\"提交指定tag\"><a href=\"#提交指定tag\" class=\"headerlink\" title=\"提交指定tag\"></a>提交指定tag</h1><p>$ git push [remote] [tag]</p>\n<h1 id=\"提交所有tag\"><a href=\"#提交所有tag\" class=\"headerlink\" title=\"提交所有tag\"></a>提交所有tag</h1><p>$ git push [remote] –tags</p>\n<h1 id=\"新建一个分支，指向某个tag\"><a href=\"#新建一个分支，指向某个tag\" class=\"headerlink\" title=\"新建一个分支，指向某个tag\"></a>新建一个分支，指向某个tag</h1><p>$ git checkout -b [branch] [tag]<br>查看信息</p>\n<h1 id=\"显示有变更的文件\"><a href=\"#显示有变更的文件\" class=\"headerlink\" title=\"显示有变更的文件\"></a>显示有变更的文件</h1><p>$ git status</p>\n<h1 id=\"显示当前分支的版本历史\"><a href=\"#显示当前分支的版本历史\" class=\"headerlink\" title=\"显示当前分支的版本历史\"></a>显示当前分支的版本历史</h1><p>$ git log</p>\n<h1 id=\"显示commit历史，以及每次commit发生变更的文件\"><a href=\"#显示commit历史，以及每次commit发生变更的文件\" class=\"headerlink\" title=\"显示commit历史，以及每次commit发生变更的文件\"></a>显示commit历史，以及每次commit发生变更的文件</h1><p>$ git log –stat</p>\n<h1 id=\"搜索提交历史，根据关键词\"><a href=\"#搜索提交历史，根据关键词\" class=\"headerlink\" title=\"搜索提交历史，根据关键词\"></a>搜索提交历史，根据关键词</h1><p>$ git log -S [keyword]</p>\n<h1 id=\"显示某个commit之后的所有变动，每个commit占据一行\"><a href=\"#显示某个commit之后的所有变动，每个commit占据一行\" class=\"headerlink\" title=\"显示某个commit之后的所有变动，每个commit占据一行\"></a>显示某个commit之后的所有变动，每个commit占据一行</h1><p>$ git log [tag] HEAD –pretty=format:%s</p>\n<h1 id=\"显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件\"><a href=\"#显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件\" class=\"headerlink\" title=\"显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件\"></a>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</h1><p>$ git log [tag] HEAD –grep feature</p>\n<h1 id=\"显示某个文件的版本历史，包括文件改名\"><a href=\"#显示某个文件的版本历史，包括文件改名\" class=\"headerlink\" title=\"显示某个文件的版本历史，包括文件改名\"></a>显示某个文件的版本历史，包括文件改名</h1><p>$ git log –follow [file]<br>$ git whatchanged [file]</p>\n<h1 id=\"显示指定文件相关的每一次diff\"><a href=\"#显示指定文件相关的每一次diff\" class=\"headerlink\" title=\"显示指定文件相关的每一次diff\"></a>显示指定文件相关的每一次diff</h1><p>$ git log -p [file]</p>\n<h1 id=\"显示过去5次提交\"><a href=\"#显示过去5次提交\" class=\"headerlink\" title=\"显示过去5次提交\"></a>显示过去5次提交</h1><p>$ git log -5 –pretty –oneline</p>\n<h1 id=\"显示所有提交过的用户，按提交次数排序\"><a href=\"#显示所有提交过的用户，按提交次数排序\" class=\"headerlink\" title=\"显示所有提交过的用户，按提交次数排序\"></a>显示所有提交过的用户，按提交次数排序</h1><p>$ git shortlog -sn</p>\n<h1 id=\"显示指定文件是什么人在什么时间修改过\"><a href=\"#显示指定文件是什么人在什么时间修改过\" class=\"headerlink\" title=\"显示指定文件是什么人在什么时间修改过\"></a>显示指定文件是什么人在什么时间修改过</h1><p>$ git blame [file]</p>\n<h1 id=\"显示暂存区和工作区的差异\"><a href=\"#显示暂存区和工作区的差异\" class=\"headerlink\" title=\"显示暂存区和工作区的差异\"></a>显示暂存区和工作区的差异</h1><p>$ git diff</p>\n<h1 id=\"显示暂存区和上一个commit的差异\"><a href=\"#显示暂存区和上一个commit的差异\" class=\"headerlink\" title=\"显示暂存区和上一个commit的差异\"></a>显示暂存区和上一个commit的差异</h1><p>$ git diff –cached [file]</p>\n<h1 id=\"显示工作区与当前分支最新commit之间的差异\"><a href=\"#显示工作区与当前分支最新commit之间的差异\" class=\"headerlink\" title=\"显示工作区与当前分支最新commit之间的差异\"></a>显示工作区与当前分支最新commit之间的差异</h1><p>$ git diff HEAD</p>\n<h1 id=\"显示两次提交之间的差异\"><a href=\"#显示两次提交之间的差异\" class=\"headerlink\" title=\"显示两次提交之间的差异\"></a>显示两次提交之间的差异</h1><p>$ git diff [first-branch]…[second-branch]</p>\n<h1 id=\"显示今天你写了多少行代码\"><a href=\"#显示今天你写了多少行代码\" class=\"headerlink\" title=\"显示今天你写了多少行代码\"></a>显示今天你写了多少行代码</h1><p>$ git diff –shortstat “@{0 day ago}”</p>\n<h1 id=\"显示某次提交的元数据和内容变化\"><a href=\"#显示某次提交的元数据和内容变化\" class=\"headerlink\" title=\"显示某次提交的元数据和内容变化\"></a>显示某次提交的元数据和内容变化</h1><p>$ git show [commit]</p>\n<h1 id=\"显示某次提交发生变化的文件\"><a href=\"#显示某次提交发生变化的文件\" class=\"headerlink\" title=\"显示某次提交发生变化的文件\"></a>显示某次提交发生变化的文件</h1><p>$ git show –name-only [commit]</p>\n<h1 id=\"显示某次提交时，某个文件的内容\"><a href=\"#显示某次提交时，某个文件的内容\" class=\"headerlink\" title=\"显示某次提交时，某个文件的内容\"></a>显示某次提交时，某个文件的内容</h1><p>$ git show [commit]:[filename]</p>\n<h1 id=\"显示当前分支的最近几次提交\"><a href=\"#显示当前分支的最近几次提交\" class=\"headerlink\" title=\"显示当前分支的最近几次提交\"></a>显示当前分支的最近几次提交</h1><p>$ git reflog<br>远程同步</p>\n<h1 id=\"下载远程仓库的所有变动\"><a href=\"#下载远程仓库的所有变动\" class=\"headerlink\" title=\"下载远程仓库的所有变动\"></a>下载远程仓库的所有变动</h1><p>$ git fetch [remote]</p>\n<h1 id=\"显示所有远程仓库\"><a href=\"#显示所有远程仓库\" class=\"headerlink\" title=\"显示所有远程仓库\"></a>显示所有远程仓库</h1><p>$ git remote -v</p>\n<h1 id=\"显示某个远程仓库的信息\"><a href=\"#显示某个远程仓库的信息\" class=\"headerlink\" title=\"显示某个远程仓库的信息\"></a>显示某个远程仓库的信息</h1><p>$ git remote show [remote]</p>\n<h1 id=\"增加一个新的远程仓库，并命名\"><a href=\"#增加一个新的远程仓库，并命名\" class=\"headerlink\" title=\"增加一个新的远程仓库，并命名\"></a>增加一个新的远程仓库，并命名</h1><p>$ git remote add [shortname] [url]</p>\n<h1 id=\"取回远程仓库的变化，并与本地分支合并\"><a href=\"#取回远程仓库的变化，并与本地分支合并\" class=\"headerlink\" title=\"取回远程仓库的变化，并与本地分支合并\"></a>取回远程仓库的变化，并与本地分支合并</h1><p>$ git pull [remote] [branch]</p>\n<h1 id=\"上传本地指定分支到远程仓库\"><a href=\"#上传本地指定分支到远程仓库\" class=\"headerlink\" title=\"上传本地指定分支到远程仓库\"></a>上传本地指定分支到远程仓库</h1><p>$ git push [remote] [branch]</p>\n<h1 id=\"强行推送当前分支到远程仓库，即使有冲突\"><a href=\"#强行推送当前分支到远程仓库，即使有冲突\" class=\"headerlink\" title=\"强行推送当前分支到远程仓库，即使有冲突\"></a>强行推送当前分支到远程仓库，即使有冲突</h1><p>$ git push [remote] –force</p>\n<h1 id=\"推送所有分支到远程仓库\"><a href=\"#推送所有分支到远程仓库\" class=\"headerlink\" title=\"推送所有分支到远程仓库\"></a>推送所有分支到远程仓库</h1><p>$ git push [remote] –all<br>撤销</p>\n<h1 id=\"恢复暂存区的指定文件到工作区\"><a href=\"#恢复暂存区的指定文件到工作区\" class=\"headerlink\" title=\"恢复暂存区的指定文件到工作区\"></a>恢复暂存区的指定文件到工作区</h1><p>$ git checkout [file]</p>\n<h1 id=\"恢复某个commit的指定文件到暂存区和工作区\"><a href=\"#恢复某个commit的指定文件到暂存区和工作区\" class=\"headerlink\" title=\"恢复某个commit的指定文件到暂存区和工作区\"></a>恢复某个commit的指定文件到暂存区和工作区</h1><p>$ git checkout [commit] [file]</p>\n<h1 id=\"恢复暂存区的所有文件到工作区\"><a href=\"#恢复暂存区的所有文件到工作区\" class=\"headerlink\" title=\"恢复暂存区的所有文件到工作区\"></a>恢复暂存区的所有文件到工作区</h1><p>$ git checkout .</p>\n<h1 id=\"重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\"><a href=\"#重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\" class=\"headerlink\" title=\"重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\"></a>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</h1><p>$ git reset [file]</p>\n<h1 id=\"重置暂存区与工作区，与上一次commit保持一致\"><a href=\"#重置暂存区与工作区，与上一次commit保持一致\" class=\"headerlink\" title=\"重置暂存区与工作区，与上一次commit保持一致\"></a>重置暂存区与工作区，与上一次commit保持一致</h1><p>$ git reset –hard</p>\n<h1 id=\"重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\"><a href=\"#重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\" class=\"headerlink\" title=\"重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\"></a>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</h1><p>$ git reset [commit]</p>\n<h1 id=\"重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\"><a href=\"#重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\" class=\"headerlink\" title=\"重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\"></a>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</h1><p>$ git reset –hard [commit]</p>\n<h1 id=\"重置当前HEAD为指定commit，但保持暂存区和工作区不变\"><a href=\"#重置当前HEAD为指定commit，但保持暂存区和工作区不变\" class=\"headerlink\" title=\"重置当前HEAD为指定commit，但保持暂存区和工作区不变\"></a>重置当前HEAD为指定commit，但保持暂存区和工作区不变</h1><p>$ git reset –keep [commit]</p>\n<h1 id=\"新建一个commit，用来撤销指定commit\"><a href=\"#新建一个commit，用来撤销指定commit\" class=\"headerlink\" title=\"新建一个commit，用来撤销指定commit\"></a>新建一个commit，用来撤销指定commit</h1><h1 id=\"后者的所有变化都将被前者抵消，并且应用到当前分支\"><a href=\"#后者的所有变化都将被前者抵消，并且应用到当前分支\" class=\"headerlink\" title=\"后者的所有变化都将被前者抵消，并且应用到当前分支\"></a>后者的所有变化都将被前者抵消，并且应用到当前分支</h1><p>$ git revert [commit]</p>\n<p>暂时将未提交的变化移除，稍后再移入<br>$ git stash<br>$ git stash pop<br>其他</p>\n<h1 id=\"生成一个可供发布的压缩包\"><a href=\"#生成一个可供发布的压缩包\" class=\"headerlink\" title=\"生成一个可供发布的压缩包\"></a>生成一个可供发布的压缩包</h1><p>$ git archive</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h1><h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><h3 id=\"在当前目录新建一个Git代码库\"><a href=\"#在当前目录新建一个Git代码库\" class=\"headerlink\" title=\"在当前目录新建一个Git代码库\"></a>在当前目录新建一个Git代码库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建一个目录，将其初始化为Git代码库\"><a href=\"#新建一个目录，将其初始化为Git代码库\" class=\"headerlink\" title=\"新建一个目录，将其初始化为Git代码库\"></a>新建一个目录，将其初始化为Git代码库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init [project-name]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载一个项目和它的整个代码历史\"><a href=\"#下载一个项目和它的整个代码历史\" class=\"headerlink\" title=\"下载一个项目和它的整个代码历史\"></a>下载一个项目和它的整个代码历史</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone [url]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"显示当前的Git配置\"><a href=\"#显示当前的Git配置\" class=\"headerlink\" title=\"显示当前的Git配置\"></a>显示当前的Git配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编辑Git配置文件\"><a href=\"#编辑Git配置文件\" class=\"headerlink\" title=\"编辑Git配置文件\"></a>编辑Git配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config -e [--global]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置提交代码时的用户信息\"><a href=\"#设置提交代码时的用户信息\" class=\"headerlink\" title=\"设置提交代码时的用户信息\"></a>设置提交代码时的用户信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config [--global] user.name &quot;[name]&quot;</span><br><span class=\"line\">git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加-删除文件\"><a href=\"#增加-删除文件\" class=\"headerlink\" title=\"增加/删除文件\"></a>增加/删除文件</h2><h3 id=\"添加指定文件到暂存区\"><a href=\"#添加指定文件到暂存区\" class=\"headerlink\" title=\"添加指定文件到暂存区\"></a>添加指定文件到暂存区</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加指定目录到暂存区，包括子目录\"><a href=\"#添加指定目录到暂存区，包括子目录\" class=\"headerlink\" title=\"添加指定目录到暂存区，包括子目录\"></a>添加指定目录到暂存区，包括子目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add [dir]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加当前目录的所有文件到暂存区\"><a href=\"#添加当前目录的所有文件到暂存区\" class=\"headerlink\" title=\"添加当前目录的所有文件到暂存区\"></a>添加当前目录的所有文件到暂存区</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加每个变化前，都会要求确认\"><a href=\"#添加每个变化前，都会要求确认\" class=\"headerlink\" title=\"添加每个变化前，都会要求确认\"></a>添加每个变化前，都会要求确认</h1><h1 id=\"对于同一个文件的多处变化，可以实现分次提交\"><a href=\"#对于同一个文件的多处变化，可以实现分次提交\" class=\"headerlink\" title=\"对于同一个文件的多处变化，可以实现分次提交\"></a>对于同一个文件的多处变化，可以实现分次提交</h1><p>$ git add -p</p>\n<h1 id=\"删除工作区文件，并且将这次删除放入暂存区\"><a href=\"#删除工作区文件，并且将这次删除放入暂存区\" class=\"headerlink\" title=\"删除工作区文件，并且将这次删除放入暂存区\"></a>删除工作区文件，并且将这次删除放入暂存区</h1><p>$ git rm [file1] [file2] …</p>\n<h1 id=\"停止追踪指定文件，但该文件会保留在工作区\"><a href=\"#停止追踪指定文件，但该文件会保留在工作区\" class=\"headerlink\" title=\"停止追踪指定文件，但该文件会保留在工作区\"></a>停止追踪指定文件，但该文件会保留在工作区</h1><p>$ git rm –cached [file]</p>\n<h1 id=\"改名文件，并且将这个改名放入暂存区\"><a href=\"#改名文件，并且将这个改名放入暂存区\" class=\"headerlink\" title=\"改名文件，并且将这个改名放入暂存区\"></a>改名文件，并且将这个改名放入暂存区</h1><p>$ git mv [file-original] [file-renamed]<br>代码提交</p>\n<h1 id=\"提交暂存区到仓库区\"><a href=\"#提交暂存区到仓库区\" class=\"headerlink\" title=\"提交暂存区到仓库区\"></a>提交暂存区到仓库区</h1><p>$ git commit -m [message]</p>\n<h1 id=\"提交暂存区的指定文件到仓库区\"><a href=\"#提交暂存区的指定文件到仓库区\" class=\"headerlink\" title=\"提交暂存区的指定文件到仓库区\"></a>提交暂存区的指定文件到仓库区</h1><p>$ git commit [file1] [file2] … -m [message]</p>\n<h1 id=\"提交工作区自上次commit之后的变化，直接到仓库区\"><a href=\"#提交工作区自上次commit之后的变化，直接到仓库区\" class=\"headerlink\" title=\"提交工作区自上次commit之后的变化，直接到仓库区\"></a>提交工作区自上次commit之后的变化，直接到仓库区</h1><p>$ git commit -a</p>\n<h1 id=\"提交时显示所有diff信息\"><a href=\"#提交时显示所有diff信息\" class=\"headerlink\" title=\"提交时显示所有diff信息\"></a>提交时显示所有diff信息</h1><p>$ git commit -v</p>\n<h1 id=\"使用一次新的commit，替代上一次提交\"><a href=\"#使用一次新的commit，替代上一次提交\" class=\"headerlink\" title=\"使用一次新的commit，替代上一次提交\"></a>使用一次新的commit，替代上一次提交</h1><h1 id=\"如果代码没有任何新变化，则用来改写上一次commit的提交信息\"><a href=\"#如果代码没有任何新变化，则用来改写上一次commit的提交信息\" class=\"headerlink\" title=\"如果代码没有任何新变化，则用来改写上一次commit的提交信息\"></a>如果代码没有任何新变化，则用来改写上一次commit的提交信息</h1><p>$ git commit –amend -m [message]</p>\n<h1 id=\"重做上一次commit，并包括指定文件的新变化\"><a href=\"#重做上一次commit，并包括指定文件的新变化\" class=\"headerlink\" title=\"重做上一次commit，并包括指定文件的新变化\"></a>重做上一次commit，并包括指定文件的新变化</h1><p>$ git commit –amend [file1] [file2] …<br>分支</p>\n<h1 id=\"列出所有本地分支\"><a href=\"#列出所有本地分支\" class=\"headerlink\" title=\"列出所有本地分支\"></a>列出所有本地分支</h1><p>$ git branch</p>\n<h1 id=\"列出所有远程分支\"><a href=\"#列出所有远程分支\" class=\"headerlink\" title=\"列出所有远程分支\"></a>列出所有远程分支</h1><p>$ git branch -r</p>\n<h1 id=\"列出所有本地分支和远程分支\"><a href=\"#列出所有本地分支和远程分支\" class=\"headerlink\" title=\"列出所有本地分支和远程分支\"></a>列出所有本地分支和远程分支</h1><p>$ git branch -a</p>\n<h1 id=\"新建一个分支，但依然停留在当前分支\"><a href=\"#新建一个分支，但依然停留在当前分支\" class=\"headerlink\" title=\"新建一个分支，但依然停留在当前分支\"></a>新建一个分支，但依然停留在当前分支</h1><p>$ git branch [branch-name]</p>\n<h1 id=\"新建一个分支，并切换到该分支\"><a href=\"#新建一个分支，并切换到该分支\" class=\"headerlink\" title=\"新建一个分支，并切换到该分支\"></a>新建一个分支，并切换到该分支</h1><p>$ git checkout -b [branch]</p>\n<h1 id=\"新建一个分支，指向指定commit\"><a href=\"#新建一个分支，指向指定commit\" class=\"headerlink\" title=\"新建一个分支，指向指定commit\"></a>新建一个分支，指向指定commit</h1><p>$ git branch [branch] [commit]</p>\n<h1 id=\"新建一个分支，与指定的远程分支建立追踪关系\"><a href=\"#新建一个分支，与指定的远程分支建立追踪关系\" class=\"headerlink\" title=\"新建一个分支，与指定的远程分支建立追踪关系\"></a>新建一个分支，与指定的远程分支建立追踪关系</h1><p>$ git branch –track [branch] [remote-branch]</p>\n<h1 id=\"切换到指定分支，并更新工作区\"><a href=\"#切换到指定分支，并更新工作区\" class=\"headerlink\" title=\"切换到指定分支，并更新工作区\"></a>切换到指定分支，并更新工作区</h1><p>$ git checkout [branch-name]</p>\n<h1 id=\"切换到上一个分支\"><a href=\"#切换到上一个分支\" class=\"headerlink\" title=\"切换到上一个分支\"></a>切换到上一个分支</h1><p>$ git checkout -</p>\n<h1 id=\"建立追踪关系，在现有分支与指定的远程分支之间\"><a href=\"#建立追踪关系，在现有分支与指定的远程分支之间\" class=\"headerlink\" title=\"建立追踪关系，在现有分支与指定的远程分支之间\"></a>建立追踪关系，在现有分支与指定的远程分支之间</h1><p>$ git branch –set-upstream [branch] [remote-branch]</p>\n<h1 id=\"合并指定分支到当前分支\"><a href=\"#合并指定分支到当前分支\" class=\"headerlink\" title=\"合并指定分支到当前分支\"></a>合并指定分支到当前分支</h1><p>$ git merge [branch]</p>\n<h1 id=\"选择一个commit，合并进当前分支\"><a href=\"#选择一个commit，合并进当前分支\" class=\"headerlink\" title=\"选择一个commit，合并进当前分支\"></a>选择一个commit，合并进当前分支</h1><p>$ git cherry-pick [commit]</p>\n<h1 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h1><p>$ git branch -d [branch-name]</p>\n<h1 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h1><p>$ git push origin –delete [branch-name]<br>$ git branch -dr [remote/branch]<br>标签</p>\n<h1 id=\"列出所有tag\"><a href=\"#列出所有tag\" class=\"headerlink\" title=\"列出所有tag\"></a>列出所有tag</h1><p>$ git tag</p>\n<h1 id=\"新建一个tag在当前commit\"><a href=\"#新建一个tag在当前commit\" class=\"headerlink\" title=\"新建一个tag在当前commit\"></a>新建一个tag在当前commit</h1><p>$ git tag [tag]</p>\n<h1 id=\"新建一个tag在指定commit\"><a href=\"#新建一个tag在指定commit\" class=\"headerlink\" title=\"新建一个tag在指定commit\"></a>新建一个tag在指定commit</h1><p>$ git tag [tag] [commit]</p>\n<h1 id=\"删除本地tag\"><a href=\"#删除本地tag\" class=\"headerlink\" title=\"删除本地tag\"></a>删除本地tag</h1><p>$ git tag -d [tag]</p>\n<h1 id=\"删除远程tag\"><a href=\"#删除远程tag\" class=\"headerlink\" title=\"删除远程tag\"></a>删除远程tag</h1><p>$ git push origin :refs/tags/[tagName]</p>\n<h1 id=\"查看tag信息\"><a href=\"#查看tag信息\" class=\"headerlink\" title=\"查看tag信息\"></a>查看tag信息</h1><p>$ git show [tag]</p>\n<h1 id=\"提交指定tag\"><a href=\"#提交指定tag\" class=\"headerlink\" title=\"提交指定tag\"></a>提交指定tag</h1><p>$ git push [remote] [tag]</p>\n<h1 id=\"提交所有tag\"><a href=\"#提交所有tag\" class=\"headerlink\" title=\"提交所有tag\"></a>提交所有tag</h1><p>$ git push [remote] –tags</p>\n<h1 id=\"新建一个分支，指向某个tag\"><a href=\"#新建一个分支，指向某个tag\" class=\"headerlink\" title=\"新建一个分支，指向某个tag\"></a>新建一个分支，指向某个tag</h1><p>$ git checkout -b [branch] [tag]<br>查看信息</p>\n<h1 id=\"显示有变更的文件\"><a href=\"#显示有变更的文件\" class=\"headerlink\" title=\"显示有变更的文件\"></a>显示有变更的文件</h1><p>$ git status</p>\n<h1 id=\"显示当前分支的版本历史\"><a href=\"#显示当前分支的版本历史\" class=\"headerlink\" title=\"显示当前分支的版本历史\"></a>显示当前分支的版本历史</h1><p>$ git log</p>\n<h1 id=\"显示commit历史，以及每次commit发生变更的文件\"><a href=\"#显示commit历史，以及每次commit发生变更的文件\" class=\"headerlink\" title=\"显示commit历史，以及每次commit发生变更的文件\"></a>显示commit历史，以及每次commit发生变更的文件</h1><p>$ git log –stat</p>\n<h1 id=\"搜索提交历史，根据关键词\"><a href=\"#搜索提交历史，根据关键词\" class=\"headerlink\" title=\"搜索提交历史，根据关键词\"></a>搜索提交历史，根据关键词</h1><p>$ git log -S [keyword]</p>\n<h1 id=\"显示某个commit之后的所有变动，每个commit占据一行\"><a href=\"#显示某个commit之后的所有变动，每个commit占据一行\" class=\"headerlink\" title=\"显示某个commit之后的所有变动，每个commit占据一行\"></a>显示某个commit之后的所有变动，每个commit占据一行</h1><p>$ git log [tag] HEAD –pretty=format:%s</p>\n<h1 id=\"显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件\"><a href=\"#显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件\" class=\"headerlink\" title=\"显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件\"></a>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</h1><p>$ git log [tag] HEAD –grep feature</p>\n<h1 id=\"显示某个文件的版本历史，包括文件改名\"><a href=\"#显示某个文件的版本历史，包括文件改名\" class=\"headerlink\" title=\"显示某个文件的版本历史，包括文件改名\"></a>显示某个文件的版本历史，包括文件改名</h1><p>$ git log –follow [file]<br>$ git whatchanged [file]</p>\n<h1 id=\"显示指定文件相关的每一次diff\"><a href=\"#显示指定文件相关的每一次diff\" class=\"headerlink\" title=\"显示指定文件相关的每一次diff\"></a>显示指定文件相关的每一次diff</h1><p>$ git log -p [file]</p>\n<h1 id=\"显示过去5次提交\"><a href=\"#显示过去5次提交\" class=\"headerlink\" title=\"显示过去5次提交\"></a>显示过去5次提交</h1><p>$ git log -5 –pretty –oneline</p>\n<h1 id=\"显示所有提交过的用户，按提交次数排序\"><a href=\"#显示所有提交过的用户，按提交次数排序\" class=\"headerlink\" title=\"显示所有提交过的用户，按提交次数排序\"></a>显示所有提交过的用户，按提交次数排序</h1><p>$ git shortlog -sn</p>\n<h1 id=\"显示指定文件是什么人在什么时间修改过\"><a href=\"#显示指定文件是什么人在什么时间修改过\" class=\"headerlink\" title=\"显示指定文件是什么人在什么时间修改过\"></a>显示指定文件是什么人在什么时间修改过</h1><p>$ git blame [file]</p>\n<h1 id=\"显示暂存区和工作区的差异\"><a href=\"#显示暂存区和工作区的差异\" class=\"headerlink\" title=\"显示暂存区和工作区的差异\"></a>显示暂存区和工作区的差异</h1><p>$ git diff</p>\n<h1 id=\"显示暂存区和上一个commit的差异\"><a href=\"#显示暂存区和上一个commit的差异\" class=\"headerlink\" title=\"显示暂存区和上一个commit的差异\"></a>显示暂存区和上一个commit的差异</h1><p>$ git diff –cached [file]</p>\n<h1 id=\"显示工作区与当前分支最新commit之间的差异\"><a href=\"#显示工作区与当前分支最新commit之间的差异\" class=\"headerlink\" title=\"显示工作区与当前分支最新commit之间的差异\"></a>显示工作区与当前分支最新commit之间的差异</h1><p>$ git diff HEAD</p>\n<h1 id=\"显示两次提交之间的差异\"><a href=\"#显示两次提交之间的差异\" class=\"headerlink\" title=\"显示两次提交之间的差异\"></a>显示两次提交之间的差异</h1><p>$ git diff [first-branch]…[second-branch]</p>\n<h1 id=\"显示今天你写了多少行代码\"><a href=\"#显示今天你写了多少行代码\" class=\"headerlink\" title=\"显示今天你写了多少行代码\"></a>显示今天你写了多少行代码</h1><p>$ git diff –shortstat “@{0 day ago}”</p>\n<h1 id=\"显示某次提交的元数据和内容变化\"><a href=\"#显示某次提交的元数据和内容变化\" class=\"headerlink\" title=\"显示某次提交的元数据和内容变化\"></a>显示某次提交的元数据和内容变化</h1><p>$ git show [commit]</p>\n<h1 id=\"显示某次提交发生变化的文件\"><a href=\"#显示某次提交发生变化的文件\" class=\"headerlink\" title=\"显示某次提交发生变化的文件\"></a>显示某次提交发生变化的文件</h1><p>$ git show –name-only [commit]</p>\n<h1 id=\"显示某次提交时，某个文件的内容\"><a href=\"#显示某次提交时，某个文件的内容\" class=\"headerlink\" title=\"显示某次提交时，某个文件的内容\"></a>显示某次提交时，某个文件的内容</h1><p>$ git show [commit]:[filename]</p>\n<h1 id=\"显示当前分支的最近几次提交\"><a href=\"#显示当前分支的最近几次提交\" class=\"headerlink\" title=\"显示当前分支的最近几次提交\"></a>显示当前分支的最近几次提交</h1><p>$ git reflog<br>远程同步</p>\n<h1 id=\"下载远程仓库的所有变动\"><a href=\"#下载远程仓库的所有变动\" class=\"headerlink\" title=\"下载远程仓库的所有变动\"></a>下载远程仓库的所有变动</h1><p>$ git fetch [remote]</p>\n<h1 id=\"显示所有远程仓库\"><a href=\"#显示所有远程仓库\" class=\"headerlink\" title=\"显示所有远程仓库\"></a>显示所有远程仓库</h1><p>$ git remote -v</p>\n<h1 id=\"显示某个远程仓库的信息\"><a href=\"#显示某个远程仓库的信息\" class=\"headerlink\" title=\"显示某个远程仓库的信息\"></a>显示某个远程仓库的信息</h1><p>$ git remote show [remote]</p>\n<h1 id=\"增加一个新的远程仓库，并命名\"><a href=\"#增加一个新的远程仓库，并命名\" class=\"headerlink\" title=\"增加一个新的远程仓库，并命名\"></a>增加一个新的远程仓库，并命名</h1><p>$ git remote add [shortname] [url]</p>\n<h1 id=\"取回远程仓库的变化，并与本地分支合并\"><a href=\"#取回远程仓库的变化，并与本地分支合并\" class=\"headerlink\" title=\"取回远程仓库的变化，并与本地分支合并\"></a>取回远程仓库的变化，并与本地分支合并</h1><p>$ git pull [remote] [branch]</p>\n<h1 id=\"上传本地指定分支到远程仓库\"><a href=\"#上传本地指定分支到远程仓库\" class=\"headerlink\" title=\"上传本地指定分支到远程仓库\"></a>上传本地指定分支到远程仓库</h1><p>$ git push [remote] [branch]</p>\n<h1 id=\"强行推送当前分支到远程仓库，即使有冲突\"><a href=\"#强行推送当前分支到远程仓库，即使有冲突\" class=\"headerlink\" title=\"强行推送当前分支到远程仓库，即使有冲突\"></a>强行推送当前分支到远程仓库，即使有冲突</h1><p>$ git push [remote] –force</p>\n<h1 id=\"推送所有分支到远程仓库\"><a href=\"#推送所有分支到远程仓库\" class=\"headerlink\" title=\"推送所有分支到远程仓库\"></a>推送所有分支到远程仓库</h1><p>$ git push [remote] –all<br>撤销</p>\n<h1 id=\"恢复暂存区的指定文件到工作区\"><a href=\"#恢复暂存区的指定文件到工作区\" class=\"headerlink\" title=\"恢复暂存区的指定文件到工作区\"></a>恢复暂存区的指定文件到工作区</h1><p>$ git checkout [file]</p>\n<h1 id=\"恢复某个commit的指定文件到暂存区和工作区\"><a href=\"#恢复某个commit的指定文件到暂存区和工作区\" class=\"headerlink\" title=\"恢复某个commit的指定文件到暂存区和工作区\"></a>恢复某个commit的指定文件到暂存区和工作区</h1><p>$ git checkout [commit] [file]</p>\n<h1 id=\"恢复暂存区的所有文件到工作区\"><a href=\"#恢复暂存区的所有文件到工作区\" class=\"headerlink\" title=\"恢复暂存区的所有文件到工作区\"></a>恢复暂存区的所有文件到工作区</h1><p>$ git checkout .</p>\n<h1 id=\"重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\"><a href=\"#重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\" class=\"headerlink\" title=\"重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\"></a>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</h1><p>$ git reset [file]</p>\n<h1 id=\"重置暂存区与工作区，与上一次commit保持一致\"><a href=\"#重置暂存区与工作区，与上一次commit保持一致\" class=\"headerlink\" title=\"重置暂存区与工作区，与上一次commit保持一致\"></a>重置暂存区与工作区，与上一次commit保持一致</h1><p>$ git reset –hard</p>\n<h1 id=\"重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\"><a href=\"#重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\" class=\"headerlink\" title=\"重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\"></a>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</h1><p>$ git reset [commit]</p>\n<h1 id=\"重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\"><a href=\"#重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\" class=\"headerlink\" title=\"重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\"></a>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</h1><p>$ git reset –hard [commit]</p>\n<h1 id=\"重置当前HEAD为指定commit，但保持暂存区和工作区不变\"><a href=\"#重置当前HEAD为指定commit，但保持暂存区和工作区不变\" class=\"headerlink\" title=\"重置当前HEAD为指定commit，但保持暂存区和工作区不变\"></a>重置当前HEAD为指定commit，但保持暂存区和工作区不变</h1><p>$ git reset –keep [commit]</p>\n<h1 id=\"新建一个commit，用来撤销指定commit\"><a href=\"#新建一个commit，用来撤销指定commit\" class=\"headerlink\" title=\"新建一个commit，用来撤销指定commit\"></a>新建一个commit，用来撤销指定commit</h1><h1 id=\"后者的所有变化都将被前者抵消，并且应用到当前分支\"><a href=\"#后者的所有变化都将被前者抵消，并且应用到当前分支\" class=\"headerlink\" title=\"后者的所有变化都将被前者抵消，并且应用到当前分支\"></a>后者的所有变化都将被前者抵消，并且应用到当前分支</h1><p>$ git revert [commit]</p>\n<p>暂时将未提交的变化移除，稍后再移入<br>$ git stash<br>$ git stash pop<br>其他</p>\n<h1 id=\"生成一个可供发布的压缩包\"><a href=\"#生成一个可供发布的压缩包\" class=\"headerlink\" title=\"生成一个可供发布的压缩包\"></a>生成一个可供发布的压缩包</h1><p>$ git archive</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckofwhdvw0000okxu1dn269es","category_id":"ckofwhdw40001okxu9nrqefpg","_id":"ckofwhdwa0004okxug6gw49ix"},{"post_id":"ckofwhdwb0005okxuc7hj7abr","category_id":"ckofwhdwc0006okxu4kn7337t","_id":"ckofwhdwd0009okxuggycgvup"}],"PostTag":[{"post_id":"ckofwhdvw0000okxu1dn269es","tag_id":"ckofwhdw70002okxueyo2fqhy","_id":"ckofwhdw90003okxugu851hh3"},{"post_id":"ckofwhdwb0005okxuc7hj7abr","tag_id":"ckofwhdwd0007okxua0nr5zfj","_id":"ckofwhdwd0008okxu39r6f9y0"}],"Tag":[{"name":"Hexo","_id":"ckofwhdw70002okxueyo2fqhy"},{"name":"Git","_id":"ckofwhdwd0007okxua0nr5zfj"}]}}